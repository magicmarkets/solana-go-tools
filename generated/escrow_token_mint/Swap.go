// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package escrow_token_mint

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Swap is the `swap` instruction.
type Swap struct {
	Lamports *uint64

	// [0] = [WRITE, SIGNER] depositor
	//
	// [1] = [WRITE] receiverTokenAccount
	//
	// [2] = [WRITE] tokenMint
	//
	// [3] = [WRITE] faucet
	//
	// [4] = [] vaultAuthority
	//
	// [5] = [] systemProgram
	//
	// [6] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSwapInstructionBuilder creates a new `Swap` instruction builder.
func NewSwapInstructionBuilder() *Swap {
	nd := &Swap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetLamports sets the "lamports" parameter.
func (inst *Swap) SetLamports(lamports uint64) *Swap {
	inst.Lamports = &lamports
	return inst
}

// SetDepositorAccount sets the "depositor" account.
func (inst *Swap) SetDepositorAccount(depositor ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(depositor).WRITE().SIGNER()
	return inst
}

// GetDepositorAccount gets the "depositor" account.
func (inst *Swap) GetDepositorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetReceiverTokenAccountAccount sets the "receiverTokenAccount" account.
func (inst *Swap) SetReceiverTokenAccountAccount(receiverTokenAccount ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(receiverTokenAccount).WRITE()
	return inst
}

// GetReceiverTokenAccountAccount gets the "receiverTokenAccount" account.
func (inst *Swap) GetReceiverTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenMintAccount sets the "tokenMint" account.
func (inst *Swap) SetTokenMintAccount(tokenMint ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenMint).WRITE()
	return inst
}

// GetTokenMintAccount gets the "tokenMint" account.
func (inst *Swap) GetTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetFaucetAccount sets the "faucet" account.
func (inst *Swap) SetFaucetAccount(faucet ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(faucet).WRITE()
	return inst
}

// GetFaucetAccount gets the "faucet" account.
func (inst *Swap) GetFaucetAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetVaultAuthorityAccount sets the "vaultAuthority" account.
func (inst *Swap) SetVaultAuthorityAccount(vaultAuthority ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(vaultAuthority)
	return inst
}

// GetVaultAuthorityAccount gets the "vaultAuthority" account.
func (inst *Swap) GetVaultAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *Swap) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *Swap) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *Swap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *Swap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst Swap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Swap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Swap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Swap) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Lamports == nil {
			return errors.New("Lamports parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Depositor is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ReceiverTokenAccount is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Faucet is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.VaultAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *Swap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Swap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Lamports", *inst.Lamports))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     depositor", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta(" receiverToken", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     tokenMint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        faucet", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("vaultAuthority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta(" systemProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("  tokenProgram", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj Swap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Lamports` param:
	err = encoder.Encode(obj.Lamports)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Swap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Lamports`:
	err = decoder.Decode(&obj.Lamports)
	if err != nil {
		return err
	}
	return nil
}

// NewSwapInstruction declares a new Swap instruction with the provided parameters and accounts.
func NewSwapInstruction(
	// Parameters:
	lamports uint64,
	// Accounts:
	depositor ag_solanago.PublicKey,
	receiverTokenAccount ag_solanago.PublicKey,
	tokenMint ag_solanago.PublicKey,
	faucet ag_solanago.PublicKey,
	vaultAuthority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *Swap {
	return NewSwapInstructionBuilder().
		SetLamports(lamports).
		SetDepositorAccount(depositor).
		SetReceiverTokenAccountAccount(receiverTokenAccount).
		SetTokenMintAccount(tokenMint).
		SetFaucetAccount(faucet).
		SetVaultAuthorityAccount(vaultAuthority).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram)
}
